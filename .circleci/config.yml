version: 2.1
orbs: 
  slack: circleci/slack@4.9.3
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Delete files from bucket
            echo "s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} && udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration
    parameters:
        workflow_id:
            type: string      
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
                # Your Memstash or kvdb.io GET URL code goes here
                # Example: Memstash.io
                SUCCESS=$(curl -H "token: e52b52de-ee26-41a5-86e8-e8dcc3d995a5" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
                # Example: kvdb.io
                SUCCESS=$(curl --insecure  https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_<< parameters.workflow_id >>)
                # Logic for reverting the database state
                if (( $SUCCESS == 1 ));
                then
                    cd ~/project/backend
                    npm install
                    npm run migration:revert
                fi  

          
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: cd frontend
      - run: npm install
      - run: 
          working_directory: ./frontend
          command: npm i run build
      - slack/notify:
          channel: cicd
          event: fail
          template: basic_fail_1
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: cd backend
      - run: 
          working_directory: ./backend
          command: npm install
      - run:
          working_directory: ./backend
          command: npm run build
      - slack/notify:
          channel: cicd
          event: fail
          template: basic_fail_1
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd  frontend
      - run: 
          working_directory: ./frontend
          command: npm install
      - run:
          working_directory: ./frontend
          command: npm run test
      
    
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd backend
      - run: 
          working_directory: ./backend
          command: npm install
      - run:
          working_directory: ./backend
          command: npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: cd frontend
      - run: npm install && npm install oauth-sign@^0.9.0
      - run:
          working_directory: ./backend
          command: npm install && npm audit fix --audit-level=critical --force
      - run: 
          working_directory: ./frontend
          command: npm i audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: cd backend
      - run: npm install
      - run:
          working_directory: ./backend
          command: npm install && npm audit fix --audit-level=critical --force
      - run:
          working_directory: ./backend
          command: npm i audit --audit-level=critical
    
  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      # Checkout code from git
      - run:  yum -y  install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy     --template-file .circleci/files/backend.yml     --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"     --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"      --tags project=udapeople
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy     --template-file .circleci/files/frontend.yml     --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"     --parameter-overrides ID="frontend-${CIRCLE_WORKFLOW_ID:0:7}"      --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text )
            printf "[web]\n%s" $BACKEND_IP > .circleci/ansible/inventory.txt
            
          #  exit 1
            # Your code here
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["b5:ef:48:4a:93:20:46:07:2c:da:2e:08:a3:59:fd:68"] 
      - run:
          name: Install Ansible
          command: |
            # Install Ansible
            apk add --update ansible 

      - run:
          name: Run Playbook and Configure server
          command: |
            # Your command
            cd .circleci/ansible && ansible-playbook -i inventory.txt configure-server.yml

      # Here's where you will add some code to rollback on failure 

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image : circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
       - run:
          command: |
            sudo apt-get update || : && sudo apt-get install python -y
            sudo apt-get -qq install awscli
      - run:
          working_directory: ./backend
          command: |
            pwd
            echo "pwd" pwd
            npm install
          
      
          
      - run:
          name: Run migrations
          working_directory: ./backend
          command: npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            echo "insecure" >> ~/.curlrc
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
            curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
            
     # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
     
      
      - run:
          name: Install Ansible
          command: |
            # Install Ansible
            sudo apt-get update || : && sudo apt-get install python -y
            sudo apt-get -qq install awscli 
      
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" > frontend/.env
            cat frontend/.env
      - run:
          name: object
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11      
      # Docker image here that supports Ansible
    steps:
      - checkout 
      # Checkout code from git
      - add_ssh_keys:
              fingerprints: ["b5:ef:48:4a:93:20:46:07:2c:da:2e:08:a3:59:fd:68"] 
      
      # Add ssh keys with fingerprint
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install dependencies
          command: |
                apk add --no-cache \
                python3 \
                py3-pip \
                && pip3 install --upgrade pip \
                && pip3 install \
                awscli \
                && rm -rf /var/cache/apk/*
                apk add --update ansible
                apk add --update curl
                apk add --update nodejs
                apk add --update npm
                apk add --update tar                        
                apk add --update gzip            
      # attach workspace
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            pwd
            echo "present workdir-------"
            tar -C backend -czf artifact.tar.gz .
            echo "nidhi-------"
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
              apk add --no-cache \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
              awscli \
              && rm -rf /var/cache/apk/*
                apk add --update ansible
                apk add --update curl
                apk add --update nodejs
                apk add --update npm
                apk add --update tar                        
                apk add --update gzip                      
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            # Fetch and prepare the BACKEND_IP env var
             export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  

        
  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
          
      - scan-frontend:
          requires: [build-frontend]
          
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
           
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]    
     
          
        

      