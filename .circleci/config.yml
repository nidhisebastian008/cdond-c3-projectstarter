version: 2.1
orbs: 
  slack: circleci/slack@4.9.3
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} && udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: cd frontend
      - run: npm install
      - run: 
          working_directory: ./frontend
          command: npm run build
      - slack/notify:
          channel: cicd
          event: fail
          template: basic_fail_1
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: cd backend
      - run: 
          working_directory: ./backend
          command: npm install
      - run:
          working_directory: ./backend
          command: npm run build
      - slack/notify:
          channel: cicd
          event: fail
          template: basic_fail_1
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd  frontend
      - run: 
          working_directory: ./frontend
          command: npm install
      - run:
          working_directory: ./frontend
          command: npm run test
      
    
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd backend
      - run: 
          working_directory: ./backend
          command: npm install
      - run:
          working_directory: ./backend
          command: npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: cd frontend
      - run: npm install && npm install oauth-sign@^0.9.0
      - run:
          working_directory: ./backend
          command: npm install && npm audit fix --audit-level=critical --force
      - run: 
          working_directory: ./frontend
          command: npm i audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: cd backend
      - run: npm install
      - run:
          working_directory: ./backend
          command: npm install && npm audit fix --audit-level=critical --force
      - run:
          working_directory: ./backend
          command: npm i audit --audit-level=critical
    
  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy     --template-file ./circleci/files/backend.yml     --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"     --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"      --tags project=udapeople

  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy     --template-file ./circleci/files/frontend.yml     --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"     --parameter-overrides ID="frontend-${CIRCLE_WORKFLOW_ID:0:7}"      --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - run: destroy_environment     

      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure

      