version: 2.1
orbs: 
  slack: circleci/slack@4.9.3
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} && udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: cd frontend
      - run: npm install
      - run: 
          working_directory: ./frontend
          command: npm run build
      - slack/notify:
          channel: cicd
          event: fail
          template: basic_fail_1
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: cd backend
      - run: 
          working_directory: ./backend
          command: npm install
      - run:
          working_directory: ./backend
          command: npm run build
      - slack/notify:
          channel: cicd
          event: fail
          template: basic_fail_1
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd  frontend
      - run: 
          working_directory: ./frontend
          command: npm install
      - run:
          working_directory: ./frontend
          command: npm run test
      
    
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd backend
      - run: 
          working_directory: ./backend
          command: npm install
      - run:
          working_directory: ./backend
          command: npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: cd frontend
      - run: npm install && npm install oauth-sign@^0.9.0
      - run:
          working_directory: ./backend
          command: npm install && npm audit fix --audit-level=critical --force
      - run: 
          working_directory: ./frontend
          command: npm i audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: cd backend
      - run: npm install
      - run:
          working_directory: ./backend
          command: npm install && npm audit fix --audit-level=critical --force
      - run:
          working_directory: ./backend
          command: npm i audit --audit-level=critical
    
  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      # Checkout code from git
      - run:  yum -y  install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy     --template-file .circleci/files/backend.yml     --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"     --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"      --tags project=udapeople
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy     --template-file .circleci/files/frontend.yml     --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"     --parameter-overrides ID="frontend-${CIRCLE_WORKFLOW_ID:0:7}"      --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> inventory
            # Your code here
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["b5:ef:48:4a:93:20:46:07:2c:da:2e:08:a3:59:fd:68"] 
      - run:
          name: Install Ansible
          command: |
            # Install Ansible
            apk add --update ansible 

      - run:
          name: Run Playbook and Configure server
          command: |
            # Your command
            cd .circleci/ansible && ansible-playbook -i inventory.txt configure-server.yml

      # Here's where you will add some code to rollback on failure 

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image : circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: cd backend
      - run:
          working_directory: ./backend
          command: npm install
      - run:
          name: Run migrations
          working_directory: ./backend
          command: npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            echo "insecure" >> ~/.curlrc
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
            curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
            
     # Here's where you will add some code to rollback on failure     

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
     
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here 
            sudo apt-get update || : && sudo apt-get install python -y
            sudo apt-get -qq install awscli
      
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      
      # Here's where you will add some code to rollback on failure        
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["b5:ef:48:4a:93:20:46:07:2c:da:2e:08:a3:59:fd:68"]
      - attach_workspace:
          at: .
      - run:
          name: Install dep
          command: |
            # Install Ansible
            apk add --update ansible 
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
                  # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            # Fetch and prepare the BACKEND_IP env var
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
workflows:
  default:
    jobs:
      - deploy-frontend
          
        

      